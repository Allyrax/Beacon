#version 430 core

layout (quads, equal_spacing, cw) in;

layout (location = 0) uniform mat4 mv_matrix;
layout (location = 1) uniform mat4 proj_matrix;

out TES_OUT
{
	vec3 N;
	vec4 color;
} tes_out;

vec4 quadratic_bezier (vec4 A, vec4 B, vec4 C, float t)
{
	vec4 D = mix (A, B, t);
	vec4 E = mix (B, C, t);

	return mix (D, E, t);
}

vec4 cubic_bezier (vec4 A, vec4 B, vec4 C, vec4 D, float t)
{
	vec4 E = mix (A, B, t);
	vec4 F = mix (B, C, t);
	vec4 G = mix (C, D, t);

	return quadratic_bezier (E, F, G, t);
}

vec4 evaluate_patch (vec2 at)
{
	vec4 P[4];
	int i;

	for (i = 0; i < 4; i++)
	{
		P[i] = cubic_bezier (gl_in[i + 0].gl_Position,
							 gl_in[i + 4].gl_Position,
							 gl_in[i + 8].gl_Position,
							 gl_in[i + 12].gl_Position,
							 at.y);
	}

	return cubic_bezier(P[0], P[1], P[2], P[3], at.x);
}

const float epsilon = 0.001;

void main (void)
{
	vec4 p1 = evaluate_patch (gl_TessCoord.xy);
	vec4 p2 = evaluate_patch (gl_TessCoord.xy + vec2 (0.0, epsilon));
	vec4 p3 = evaluate_patch (gl_TessCoord.xy + vec2 (epsilon, 0.0));

	vec3 v1 = normalize (p2.xyz - p1.xyz);
	vec3 v2 = normalize (p3.xyz - p1.xyz);

	vec4 vertex = proj_matrix * p1;
	tes_out.N = cross (v1, v2);

	vec3 light_vector = vec4(proj_matrix * mv_matrix * vec4(1.0, 1.0, 1.0, 1.0)).xyz - vertex.xyz;
	vec3 light_direction = normalize(light_vector);
	float cos = dot(light_direction, tes_out.N);
	tes_out.color = vec4(vec3(cos * vec3(0.0, 0.3, 1.0) * 900.0 / (length(light_vector) * length(light_vector)) + (1 - cos) * vec3(0.2, 0.2, 0.5).xyz * 5.0) / ((length(light_vector) * length(light_vector))), 1.0);

	gl_Position = vertex;
}